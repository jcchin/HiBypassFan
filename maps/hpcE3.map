//******************************************************************************
//*   © Copyright 2003.  The U.S. Government, as Represented by the Administrator
//*     of the National Aeronautics and Space Administration (NASA).
//*   © Copyright 2008 - 2013.     The Ohio Aerospace Institute, on behalf of the NPSS(TM)
//*     Consortium.  All rights reserved.  Includes content licensed from the 
//*     U.S. Government, National Aeronautics and Space Administration under 
//*     United States Copyright Registration Numbers  V3503D364 and V3482D344.
//*******************************************************************************

//******************************************************************************
//*  NPSSTM software and related documentation is export controlled
//*  with an Export Control Classification Number(ECCN) of 9D991, controlled for
//*  Anti-Terrorism reasons, under U.S. Export Administration Regulations 15 CFR
//*  730-774. It may not be transferred to a country checked under anti-terrorism
//*  on the Commerce Country Chart structure or to foreign nationals of those
//*  countries in the U.S. or abroad without first obtaining a license from the
//*  Bureau of Industry and Security, United States Department of Commerce. 
//*  Violations are punishable by fine, imprisonment, or both.
//*******************************************************************************

// ******************************************************************
// This data Map is generated from an existing NEPP map.
// ******************************************************************

//  ---------------------------------------------------------------
//  |    High Pressure Compressor Maps
//  ---------------------------------------------------------------
//  |    Declaration of a new Subelement instance called S_map
//  |    that is of the type CompressorRlineMap
//  ---------------------------------------------------------------

Subelement CompressorRlineMap S_map {
	
	// Do NOT change these values!  They are specific to these maps.
	alphaMapDes = 0.0; // Unscaled map design point vane angle.
	NcMapDes = 1.0; // Unscaled map design point corrected speed. Max eff point at 100% speed	
	RlineMapDes = 2.0; // Unscaled map design point Rline. Max eff point at 100% speed
	RlineStall= 1.0; // Rline at stall
	
	//  ----------------------------------------------------------------------
	//  |    Declare a table (or function) named TB_Wc(real ALPHA, real SPED, real R)
	//  |    To satisfy the TB_Wc socket requirement.
	//  ---------------------------------------------------------------------- 

	// 3001  HPC corrected flow VS. stator angle, fraction of design speed, and R-line
	// Note: this map has ALPHA = 0 and ALPHA = 1, but both submaps are identical
	Table TB_Wc(real ALPHA, real SPED, real R) {

		ALPHA =0. {
			SPED = 0.5 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 14.0476, 14.6023, 15.1587, 15.5556, 15.7937, 15.9524 } 
			}
			SPED = 0.6 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 19.127, 19.9206, 20.3175, 20.6349, 20.9524, 20.9524 } 
			}
			SPED = 0.7 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 27.1429, 28.254, 28.4127, 28.6508, 28.9683, 29.127 } 
			}
			SPED = 0.75 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 32.2222, 33.8095, 34.5238, 34.7619, 35.1587, 35.3968 } 
			}
			SPED = 0.8 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 42.4603, 43.254, 44.8413, 45.6349, 46.2698, 46.5873 } 
			}
			SPED = 0.85 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 52.3016, 53.6508, 54.5238, 55.1587, 55.4762, 55.7143 } 
			}
			SPED = 0.875 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 59.8413, 61.1111, 62.1429, 62.6984, 63.0159, 63.0159 } 
			}
			SPED = 0.9 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 68.8889, 70.3968, 71.3492, 71.9841, 72.1429, 72.381 } 
			}
			SPED = 0.925 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 80.1587, 82.0635, 83.1746, 83.8889, 84.0476, 84.2064 } 
			}
			SPED = 0.95 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 92.4603, 94.7619, 96.4286, 97.4603, 97.4603, 97.4603 } 
			}
			SPED = 0.975 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 107.143, 109.048, 110.317, 111.27, 111.587, 111.667 } 
			}
			SPED = 0.985 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 112.937, 114.921, 116.587, 117.857, 118.333, 118.571 } 
			}
			SPED = 1.0 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 122.143, 122.698, 123.175, 123.571, 123.73, 123.968 } 
			}
			SPED = 1.025 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 129.683, 130.159, 130.397, 130.794, 131.19, 131.19 } 
			}
		} // end ALPHA = 0.0

		ALPHA = 1.0 {
			SPED = 0.5 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 14.0476, 14.6023, 15.1587, 15.5556, 15.7937, 15.9524 } 
			}
			SPED = 0.6 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 19.127, 19.9206, 20.3175, 20.6349, 20.9524, 20.9524 } 
			}
			SPED = 0.7 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 27.1429, 28.254, 28.4127, 28.6508, 28.9683, 29.127 } 
			}
			SPED = 0.75 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 32.2222, 33.8095, 34.5238, 34.7619, 35.1587, 35.3968 } 
			}
			SPED = 0.8 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 42.4603, 43.254, 44.8413, 45.6349, 46.2698, 46.5873 } 
			}
			SPED = 0.85 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 52.3016, 53.6508, 54.5238, 55.1587, 55.4762, 55.7143 } 
			}
			SPED = 0.875 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 59.8413, 61.1111, 62.1429, 62.6984, 63.0159, 63.0159 } 
			}
			SPED = 0.9 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 68.8889, 70.3968, 71.3492, 71.9841, 72.1429, 72.381 } 
			}
			SPED = 0.925 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 80.1587, 82.0635, 83.1746, 83.8889, 84.0476, 84.2064 } 
			}
			SPED = 0.95 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 92.4603, 94.7619, 96.4286, 97.4603, 97.4603, 97.4603 } 
			}
			SPED = 0.975 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 107.143, 109.048, 110.317, 111.27, 111.587, 111.667 } 
			}
			SPED = 0.985 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 112.937, 114.921, 116.587, 117.857, 118.333, 118.571 } 
			}
			SPED = 1.0 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 122.143, 122.698, 123.175, 123.571, 123.73, 123.968 } 
			}
			SPED = 1.025 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				FLOW = { 129.683, 130.159, 130.397, 130.794, 131.19, 131.19 } 
			}
		} // end ALPHA = 1.0

		ALPHA.interp = "linear" ;
		ALPHA.extrap = "linear" ;

		SPED.interp = "lagrange3" ;
		SPED.extrap = "linear" ;

		R.interp = "lagrange3" ;
		R.extrap = "linear" ;

		extrapIsError = 0;		
		printExtrap = 0;
		
	} // end TB_Wc

	//  ----------------------------------------------------------------------
	//  |    Declare a table (or function) named TB_eff(real ALPHA, real SPED, real R)
	//  |    To satisfy the TB_eff socket requirement.
	//  ---------------------------------------------------------------------- 

	// 3002   HPC adiabatic efficiency VS. vane angle, fraction of design speed, and R-line  
	// Note: this map has ALPHA = 0 and ALPHA = 1, but both submaps are identical	
	Table TB_eff(real ALPHA, real SPED, real R) {

		ALPHA = 0.{
			SPED = 0.5 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.6453, 0.6484, 0.6461, 0.6306, 0.5809, 0.5615 } 
			}
			SPED = 0.6 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.6593, 0.6624, 0.664, 0.6508, 0.6228, 0.5724 } 
			}
			SPED = 0.7 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.688, 0.702, 0.7012, 0.6966, 0.6756, 0.6492 } 
			}
			SPED = 0.75 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.709, 0.7315, 0.7346, 0.7331, 0.7183, 0.678 } 
			}
			SPED = 0.8 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.754, 0.761, 0.7734, 0.7734, 0.7703, 0.7517 } 
			}
			SPED = 0.85 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7641, 0.7874, 0.7929, 0.7936, 0.782, 0.7587 } 
			}
			SPED = 0.875 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7548, 0.7913, 0.8014, 0.8053, 0.8037, 0.7696 } 
			}
			SPED = 0.9 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7734, 0.7998, 0.8076, 0.8107, 0.8092, 0.7828 } 
			}
			SPED = 0.925 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7851, 0.813, 0.8216, 0.82, 0.8177, 0.7835 } 
			}
			SPED = 0.95 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7882, 0.8115, 0.8231, 0.8278, 0.827, 0.8022 } 
			}
			SPED = 0.975 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7913, 0.813, 0.827, 0.8348, 0.8332, 0.796 } 
			}
			SPED = 0.985 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.8053, 0.8177, 0.827, 0.8317, 0.8301, 0.803 } 
			}
			SPED = 1.0 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7835, 0.8053, 0.8169, 0.8216, 0.82, 0.8022 } 
			}
			SPED = 1.025 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7703, 0.7766, 0.782, 0.7851, 0.7828, 0.7634 } 
			}
		} // end ALPHA = 0.0

		ALPHA = 1.{
			SPED = 0.5 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.6453, 0.6484, 0.6461, 0.6306, 0.5809, 0.5615 } 
			}
			SPED = 0.6 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.6593, 0.6624, 0.664, 0.6508, 0.6228, 0.5724 } 
			}
			SPED = 0.7 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.688, 0.702, 0.7012, 0.6966, 0.6756, 0.6492 } 
			}
			SPED = 0.75 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.709, 0.7315, 0.7346, 0.7331, 0.7183, 0.678 } 
			}
			SPED = 0.8 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.754, 0.761, 0.7734, 0.7734, 0.7703, 0.7517 } 
			}
			SPED = 0.85 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7641, 0.7874, 0.7929, 0.7936, 0.782, 0.7587 } 
			}
			SPED = 0.875 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7548, 0.7913, 0.8014, 0.8053, 0.8037, 0.7696 } 
			}
			SPED = 0.9 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7734, 0.7998, 0.8076, 0.8107, 0.8092, 0.7828 } 
			}
			SPED = 0.925 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7851, 0.813, 0.8216, 0.82, 0.8177, 0.7835 } 
			}
			SPED = 0.95 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7882, 0.8115, 0.8231, 0.8278, 0.827, 0.8022 } 
			}
			SPED = 0.975 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.7913, 0.813, 0.827, 0.8348, 0.8332, 0.796 } 
			}
			SPED = 0.985 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				EFF = { 0.8053, 0.8177, 0.827, 0.8317, 0.8301, 0.803 } 
			}
			SPED = 1.0 {
			  R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
			  EFF = { 0.7835, 0.8053, 0.8169, 0.8216, 0.82, 0.8022 } 
			}
			SPED = 1.025 {
			  R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
			  EFF = { 0.7703, 0.7766, 0.782, 0.7851, 0.7828, 0.7634 } 
			}
		} // end ALPHA = 1.0

		ALPHA.interp = "linear" ;
		ALPHA.extrap = "linear" ;

		SPED.interp = "lagrange3" ;
		SPED.extrap = "linear" ;

		R.interp = "lagrange3" ;
		R.extrap = "linear" ;

		extrapIsError = 0;		
		printExtrap = 0;
		
	} // end TB_eff

	//  ----------------------------------------------------------------------
	//  |    Declare a table (or function) named TB_PR(real ALPHA, real SPED, real R)
	//  |    To satisfy the TB_PR socket requirement.
	//  ---------------------------------------------------------------------- 

	// HPC total-to-total pressure ratio VS. vane angle, fraction of design speed, and R-line 
	// Note: this map has ALPHA = 0 and ALPHA = 1, but both submaps are identical	
	Table TB_PR(real ALPHA, real SPED, real R) {

		ALPHA=0.{
			SPED = 0.5 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 2.2769, 2.2161, 2.1552, 2.0033, 1.9121, 1.6688 } 
			}
			SPED = 0.6 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 3.2193, 3.1281, 3.0065, 2.8241, 2.6113, 2.2161 } 
			}
			SPED = 0.7 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 4.861, 4.5874, 4.3138, 4.1618, 3.7666, 3.1889 } 
			}
			SPED = 0.75 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 5.9555, 5.6515, 5.4083, 5.1954, 4.7394, 4.0098 } 
			}
			SPED = 0.8 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 7.6884, 7.5668, 7.3236, 7.1412, 6.6243, 5.6515 } 
			}
			SPED = 0.85 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 10.2117, 9.7253, 9.2693, 8.9349, 8.2356, 7.202 } 
			}
			SPED = 0.875 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 11.7318, 11.3062, 10.759, 10.2725, 9.6037, 8.3876 } 
			}
			SPED = 0.9 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 13.6775, 13.1303, 12.5223, 11.9446, 11.2757, 9.9989 } 
			}
			SPED = 0.925 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 16.3529, 15.8056, 15.076, 14.4072, 13.5255, 12.1574 } 
			}
			SPED = 0.95 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 19.4235, 18.9978, 18.3594, 17.4473, 16.4745, 14.9544 } 
			}
			SPED = 0.975 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 23.4365, 22.8284, 22.0076, 20.8523, 19.8187, 18.3898 } 
			}
			SPED = 0.985 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 24.835, 24.3181, 23.6493, 22.5548, 21.4604, 20.1227 } 
			}
			SPED = 1.0 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 27.0239, 26.2942, 25.3822, 24.1357, 22.7372, 21.5212 } 
			}
			SPED = 1.025 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 29.0304, 28.2704, 27.2975, 26.3246, 24.5309, 23.3453 } 
			}
		} // end ALPHA = 0.0
		
		ALPHA=1.{
			SPED = 0.5 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 2.2769, 2.2161, 2.1552, 2.0033, 1.9121, 1.6688 } 
			}
			SPED = 0.6 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 3.2193, 3.1281, 3.0065, 2.8241, 2.6113, 2.2161 } 
			}
			SPED = 0.7 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 4.861, 4.5874, 4.3138, 4.1618, 3.7666, 3.1889 } 
			}
			SPED = 0.75 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 5.9555, 5.6515, 5.4083, 5.1954, 4.7394, 4.0098 } 
			}
			SPED = 0.8 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 7.6884, 7.5668, 7.3236, 7.1412, 6.6243, 5.6515 } 
			}
			SPED = 0.85 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 10.2117, 9.7253, 9.2693, 8.9349, 8.2356, 7.202 } 
			}
			SPED = 0.875 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 11.7318, 11.3062, 10.759, 10.2725, 9.6037, 8.3876 } 
			}
			SPED = 0.9 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 13.6775, 13.1303, 12.5223, 11.9446, 11.2757, 9.9989 } 
			}
			SPED = 0.925 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 16.3529, 15.8056, 15.076, 14.4072, 13.5255, 12.1574 } 
			}
			SPED = 0.95 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 19.4235, 18.9978, 18.3594, 17.4473, 16.4745, 14.9544 } 
			}
			SPED = 0.975 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 23.4365, 22.8284, 22.0076, 20.8523, 19.8187, 18.3898 } 
			}
			SPED = 0.985 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 24.835, 24.3181, 23.6493, 22.5548, 21.4604, 20.1227 } 
			}
			SPED = 1.0 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 27.0239, 26.2942, 25.3822, 24.1357, 22.7372, 21.5212 } 
			}
			SPED = 1.025 {
				R = { 1.0, 1.33, 1.67, 2.0, 2.25, 2.5 } 
				PR = { 29.0304, 28.2704, 27.2975, 26.3246, 24.5309, 23.3453 } 
			}
		} // end ALPHA = 1.0

		ALPHA.interp = "linear" ;
		ALPHA.extrap = "linear" ;

		SPED.interp = "lagrange3" ;
		SPED.extrap = "linear" ;

		R.interp = "lagrange3" ;
		R.extrap = "linear" ;

		extrapIsError = 0;		
		printExtrap = 0;
		
	} // end TB_PR
	
} // end S_map scope (CompressorRlineMap subelement)

